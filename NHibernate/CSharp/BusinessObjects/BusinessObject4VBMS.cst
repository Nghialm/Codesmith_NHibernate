<%-- 
Name: BusinessObject.cst
Author: Tom DuPont
Description: Generates a Business Object for NHibernate.
--%>
<%@ CodeTemplate Language="C#" Src="..\Helpers\NHibernateHelper.cs" Inherits="NHibernateHelper" TargetLanguage="C#" Debug="False" Description="Generates a Business Object for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="ExcludedTables" Type="SchemaExplorer.TableSchemaCollection" Optional="True" Category="1b. Database Options" Description="A collection of tables to be excluded during generation." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>
<%@ Property Name="VsVersion" Type="VisualStudioVersion" Default="VS_2008" Optional="False" Category="2. Versions" Description="The version of Visual Studio to generate for." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<% this.tablePrefix = TablePrefix; %>
Imports System
Imports System.ComponentModel

Public Partial Class <%= GetClassName(SourceTable) %> 
	Inherits BusinessBase(Of <%= SystemCSharp[GetBusinessBaseIdType(SourceTable).ToString()] %>)
    #Region "Declarations"

	<% // Primary Keys %>
	<% if(IsMutliColumnPrimaryKey(SourceTable.PrimaryKey)) { %>
	<% foreach(MemberColumnSchema mcs in SourceTable.PrimaryKey.MemberColumns) { %>
	Private <%= GetPrivateVariableName(mcs) %> As <%= mcs.SystemType.ToString() %>  = <%= GetInitialization(mcs.SystemType) %>
	<% } %>
	<% } %>
	
	<% // Primitives %>
	<% foreach(ColumnSchema column in SourceTable.NonKeyColumns) { %>
	Private <%= GetPrivateVariableName(column) %> As <%= column.SystemType.ToString() %> = <%= GetInitialization(column.SystemType) %>
	<% } %>
	
	<% // Many-To-One %>
	<% foreach(TableKeySchema tks in SourceTable.ForeignKeys) { %>
	<% foreach(MemberColumnSchema mcs in tks.ForeignKeyMemberColumns) { %>
	<% if(!ExcludedTables.Contains(tks.PrimaryKeyTable) && !mcs.IsPrimaryKeyMember) { %>
	Private <%= GetPrivateVariableName(tks.PrimaryKeyTable, mcs) %> As <%= GetClassName(tks.PrimaryKeyTable) %> = null;
	<% } %>
	<% } %>
	<% } %>
	
	<% // One-To-Many & Many-To-Many %>
	<% foreach(TableKeySchema tks in SourceTable.PrimaryKeys) { %>
	<% foreach(MemberColumnSchema mcs in tks.ForeignKeyMemberColumns) { %>
	<% if (!mcs.IsPrimaryKeyMember) { %>
	<% if (!IsManyToMany(mcs.Table)) { %>
	<% if (!ExcludedTables.Contains(mcs.Table)) { %>
	Private <%= GetPrivateVariableNamePlural(mcs.Table, mcs) %> As IList(Of <%= GetClassName(mcs.Table) %>) = New List(Of <%= GetClassName(mcs.Table) %>)()
	<% } %>
	<% } else { %>
	<% TableSchema foreignTable = GetToManyTable(mcs.Table, SourceTable); %>
	<% if (!ExcludedTables.Contains(foreignTable)) { %>
	Private <%= GetPrivateVariableNamePlural(foreignTable, mcs) %> As IList(Of <%= GetClassName(foreignTable) %>) = New List(Of <%= GetClassName(foreignTable) %>)()
	<% } %>
	<% } %>
	<% } %>
	<% } %>
	<% } %>
	
    #End Region

    #Region "Constructors"

    Public Sub New()
	End Sub

    #End Region

    #Region "Methods"

    Public Overrides Function GetHashCode() As Integer
        Dim sb As New System.Text.StringBuilder()
        
        sb.Append(Me.[GetType]().FullName)
        <% foreach(ColumnSchema column in SourceTable.NonKeyColumns) { %>
		sb.Append(<%= GetPrivateVariableName(column) %>)
		<% } %>

        Return sb.ToString().GetHashCode()
    End Function
	
	Public Overridable Function Clone() As <%= GetClassName(SourceTable) %>
        Return DirectCast(Me.MemberwiseClone(), <%= GetClassName(SourceTable) %>)
    End Function
	
	Public Overridable Sub SetProperty(des As <%= GetClassName(SourceTable) %>)
		'ID Field
		'Id = des.Id
		'Non ID Field
	<% foreach(ColumnSchema column in SourceTable.NonKeyColumns) { %>
		<%= GetPrivateVariableName(column) %> = des.<%= GetPropertyName(column) %>
	<% } %>
	End Sub

    #End Region

    #Region "Properties"

	<% // Primary Keys %>
	<% if(IsMutliColumnPrimaryKey(SourceTable.PrimaryKey)) { %>
	Public Overrides ReadOnly Property Id As String
		Get
			Dim uniqueId As New System.Text.StringBuilder()
			<% for(int x=0; x<SourceTable.PrimaryKey.MemberColumns.Count; x++) { %>
			<% if(x>0) { %>
			uniqueId.Append("^")
			<% } %>
			uniqueId.Append(<%= GetPrivateVariableName(SourceTable.PrimaryKey.MemberColumns[x]) %>.ToString())
			<% } %>
			Return uniqueId.ToString()
		End Get
	End Property
	
	<% foreach(MemberColumnSchema mcs in SourceTable.PrimaryKey.MemberColumns) { %>
	public Overridable Property <%= GetPropertyName(mcs) %> As <%= mcs.SystemType.ToString() %> 
        Get 
			return <%= GetPrivateVariableName(mcs) %>
		End Get
		Set
			<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= GetPropertyName(mcs) %>Changing()<% } %>
			<%= GetPrivateVariableName(mcs) %> = value
			<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= GetPropertyName(mcs) %>Changed()<% } %>
		End Set
    End Property
	<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>
	Private Partial Sub On<%= GetPropertyName(mcs) %>Changing()
	End Sub
	Private Partial Sub On<%= GetPropertyName(mcs) %>Changed()
	End Sub
	<% } %>
	
	<% } %>
	<% } %>
	<% // Primitives %>
	<% foreach(ColumnSchema column in SourceTable.NonKeyColumns) { %>
	public Overridable Property <%= GetPropertyName(column) %> As <%= column.SystemType.ToString() %> 
        Get 
			Return <%= GetPrivateVariableName(column) %>
		End Get
		Set
			<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= GetPropertyName(column) %>Changing()<% } %>
			<%= GetPrivateVariableName(column) %> = value
			<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= GetPropertyName(column) %>Changed()<% } %>
		End Set
    End Property
	<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>
	Private Partial Sub On<%= GetPropertyName(column) %>Changing()
	End Sub
	Private Partial Sub On<%= GetPropertyName(column) %>Changed()
	End Sub
	<% } %>
	
	<% } %>
	<% // Many-To-One %>
	<% foreach(TableKeySchema tks in SourceTable.ForeignKeys) { %>
	<% foreach(MemberColumnSchema mcs in tks.ForeignKeyMemberColumns) { %>
	<% if (!mcs.IsPrimaryKeyMember) { %>
	<% if(!ExcludedTables.Contains(tks.PrimaryKeyTable) && !mcs.IsPrimaryKeyMember) { %>
	public Overridable Property <%= GetPropertyName(tks.PrimaryKeyTable, mcs) %> As <%= GetClassName(tks.PrimaryKeyTable) %> 
        Get 
			return <%= GetPrivateVariableName(tks.PrimaryKeyTable, mcs) %>
		End Get
		Set
			<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= GetPropertyName(tks.PrimaryKeyTable, mcs) %>Changing()<% } %>
			<%= GetPrivateVariableName(tks.PrimaryKeyTable, mcs) %> = value
			<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= GetPropertyName(tks.PrimaryKeyTable, mcs) %>Changed()<% } %>
		End Set
    End Property
	<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>
	Private Partial Sub On<%= GetPropertyName(tks.PrimaryKeyTable, mcs) %>Changing()
	End Sub
	Private Partial Sub On<%= GetPropertyName(tks.PrimaryKeyTable, mcs) %>Changed()
	End Sub
	<% } %>
	
	<% } %>
	<% } %>
	<% } %>
	<% } %>
	<% // One-To-Many & Many-To-Many %>
	<% foreach(TableKeySchema tks in SourceTable.PrimaryKeys) { %>
	<% foreach(MemberColumnSchema mcs in tks.ForeignKeyMemberColumns) { %>
	<% if (!mcs.IsPrimaryKeyMember) { %>
	<% if (!IsManyToMany(mcs.Table)) { %>
	<% if (!ExcludedTables.Contains(mcs.Table)) { %>
	public Overridable Property <%= GetPropertyNamePlural(mcs.Table, mcs) %> As IList(Of <%= GetClassName(mcs.Table) %>)
        Get 
			Return <%= GetPrivateVariableNamePlural(mcs.Table, mcs) %>
		End Get
        Set
			<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= GetPropertyNamePlural(mcs.Table, mcs) %>Changing()<% } %>
			<%= GetPrivateVariableNamePlural(mcs.Table, mcs) %> = value
			<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= GetPropertyNamePlural(mcs.Table, mcs) %>Changed()<% } %>
		End Set
    End Property
	<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>
	Private Partial Sub On<%= GetPropertyNamePlural(mcs.Table, mcs) %>Changing()
	End Sub
	Private Partial Sub On<%= GetPropertyNamePlural(mcs.Table, mcs) %>Changed()
	End Sub
	<% } %>
	
	<% } %>
	<% } else { %>
	<% TableSchema foreignTable = GetToManyTable(mcs.Table, SourceTable); %>
	<% if (!ExcludedTables.Contains(foreignTable)) { %>
	public Overridable Property <%= GetPropertyNamePlural(foreignTable, mcs) %> As IList(Of <%= GetClassName(foreignTable) %>)
        Get 
			return <%= GetPrivateVariableNamePlural(foreignTable, mcs) %>
		End Get
        Set
			<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= GetPropertyNamePlural(foreignTable, mcs) %>Changing()<% } %>
			<%= GetPrivateVariableNamePlural(foreignTable, mcs) %> = value
			<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>On<%= GetPropertyNamePlural(foreignTable, mcs) %>Changed()<% } %>
		End Set
    End Property
	<% if(VsVersion.Equals(VisualStudioVersion.VS_2008)) { %>
	Private Partial Sub On<%= GetPropertyNamePlural(foreignTable, mcs) %>Changing()
	End Sub
	Private Partial Sub On<%= GetPropertyNamePlural(foreignTable, mcs) %>Changed()
	End Sub
	<% } %>
	
	<% } %>
	<% } %>
	<% } %>
	<% } %>
	<% } %>
    #End Region
	
	#Region "INotifyPropertyChanged"
	'Public Event PropertyChanged As PropertyChangedEventHandler
	'Private Sub NotifyPropertyChanged(propertyName As string)
	'	RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
	'End Sub
	#End Region
End Class