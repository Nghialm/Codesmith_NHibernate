<%-- 
Name: EditableBusinessObject.cst
Author: Tom DuPont
Description: Generates an editable Business Object for NHibernate.
--%>
<%@ CodeTemplate Language="C#" Src="..\Helpers\NHibernateHelper.cs" Inherits="NHibernateHelper" TargetLanguage="C#" Debug="False" Description="Generates an editable Business Object for NHibernate." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="1a. Source Table" Description="The source table to generate from." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="" Optional="True" Category="1b. Database Options" Description="A prefix that will be stripped from table names when class names are generated." %>
<%@ Property Name="BusinessNamespace" Type="System.String" Default="NHibernate.Generated.BusinessObjects" Optional="False" Category="2. Namespaces" Description="The desired Namespace for the Business Objects." %>
<%@ Property Name="BaseNamespace" Type="System.String" Default="NHibernate.Generated.Base" Optional="False" Category="2. Namespaces" Description="The Namespace where the Base classes (BusinessBase & ManagerBase) are located." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SystemCSharp" Src="System-CSharpAlias" %>
<% this.tablePrefix = TablePrefix; %>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using <%= BaseNamespace %>;
using Admin.IDAO;
using Admin.Entities;
using Spring.Stereotype;
using Spring.Transaction.Interceptor;

namespace <%= BusinessNamespace %>
{
	[Repository]
    public class <%= GetClassName(SourceTable) %>NHibDao : HibernateDao, I<%= GetClassName(SourceTable) %>Dao
    {
        [Transaction(ReadOnly = true)]
        public <%= GetClassName(SourceTable) %> Get(<%= SystemCSharp[GetBusinessBaseIdType(SourceTable).ToString()] %> id)
        {
            return CurrentSession.Get<<%= GetClassName(SourceTable) %>>(id);
        }

        [Transaction(ReadOnly = true)]
        public IList<<%= GetClassName(SourceTable) %>> GetAll()
        {
            return GetAll<<%= GetClassName(SourceTable) %>>();
        }

        [Transaction(ReadOnly = false)]
        public <%= SystemCSharp[GetBusinessBaseIdType(SourceTable).ToString()] %> Save(<%= GetClassName(SourceTable) %> entity)
        {
            return (<%= SystemCSharp[GetBusinessBaseIdType(SourceTable).ToString()] %>)CurrentSession.Save(entity);
        }

        [Transaction(ReadOnly = false)]
        public void Update(<%= GetClassName(SourceTable) %> entity)
        {
            CurrentSession.SaveOrUpdate(entity);
        }

        [Transaction(ReadOnly = false)]
        public void Delete(<%= GetClassName(SourceTable) %> entity)
        {
            CurrentSession.Delete(entity);
        }
    }
}